use reqwest;
use reqwest::{Client, Error};
use serde::Deserialize;
use serde_json::from_reader;

#[derive(Deserialize, Debug)]
pub struct Bridge {
    id: String,
    internalipaddress: String,
}

/// find bridges using discovery url
pub async fn find_bridges() -> Result<Vec<Bridge>, Error> {
    let request: Vec<Bridge> = reqwest::get("https://discovery.meethue.com/")
        .await?
        .json()
        .await?;
    Ok(request)
}

#[derive(Deserialize, Debug)]
pub struct User {
    username: String,
}
/// Send parallel requests to all bridges found
pub async fn create_user(bridges: Vec<Bridge>) -> Result<(), Error> {
    let mut ips: Vec<String> = bridges
        .into_iter()
        .map(|bridge| bridge.internalipaddress)
        .collect();

    // Remove router adress from bridges
    ips.retain(|ip| ip != "192.168.0.100");

    for ip in ips {
        loop {
            let result = authorize_user_request(&ip).await?;
            println!("{:?}", result);
        }
    }

    Ok(())
}

/// Send request to bridge to get User
pub async fn authorize_user_request(ip: &str) -> Result<User, Error> {
    let address = format!("http://{}/api", ip);
    println!("{}", address);

    let client = Client::new();
    let body = format!("{{\"devicetype\":\"{}\"}}", "rue_pc_app");
    let resp = client.post(&address).json(&body).send().await?;
    let user: User = serde_json::from_str(&resp).unwrap();
    user
}
